{"version":3,"file":"384.bundle.js","mappings":"6MA2DA,QAtDc,SAAUA,GACpB,IAAIC,GAAcC,EAAAA,EAAAA,QAAO,MAmDzB,OAlDAC,EAAAA,EAAAA,YAAU,WACN,IAAIC,EACAC,EAASJ,EAAYK,QACzB,GAAKD,EAAL,CAEA,IAAIE,EAAS,IAAIC,EAAAA,IAAOH,GAAQ,EAAML,EAAMS,eAAe,GAoBvDC,EAnBc,WAEd,IAAIA,EAAQ,IAAIC,EAAAA,IAAMJ,GACtBG,EAAME,WAAa,IAAIC,EAAAA,IAAO,EAAG,EAAG,EAAG,GACvC,IAAIC,EAAS,IAAIC,EAAAA,IAAQ,EAAG,EAAG,GAa/B,OAZa,IAAIC,EAAAA,IAAgB,SAAUF,EAAQJ,GAC5CO,cAAcZ,GAAQ,GAE7B,IAAIa,EAAAA,IAAiB,SAAU,IAAIH,EAAAA,IAAQ,EAAG,EAAG,GAAIL,GAErDS,EAAAA,IAAYC,gBAAgB,KAAMpB,EAAMqB,QAASrB,EAAMsB,cAAeZ,GAAOa,MAAK,SAAUC,GACxF,IAAIpB,EACAqB,EAAYD,EAAOE,OACvBD,EAAU,GAAGE,SAASC,EAAI,EAC1BH,EAAU,GAAGI,QAAU,IAAId,EAAAA,IAAQ,GAAI,GAAI,IACb,QAA7BX,EAAKJ,EAAM8B,oBAAiC,IAAP1B,GAAyBA,EAAG2B,KAAK/B,EAC3E,IACOU,CACX,CACYsB,GACRtB,EAAMuB,UACwB,QAA7B7B,EAAKJ,EAAMkC,oBAAiC,IAAP9B,GAAyBA,EAAG2B,KAAK/B,EAAOU,GAG9EA,EAAMyB,kBAAkBC,SAAQ,SAAU1B,GAAS,IAAIN,EAAI,OAAqC,QAA7BA,EAAKJ,EAAMkC,oBAAiC,IAAP9B,OAAgB,EAASA,EAAG2B,KAAK/B,EAAOU,EAAQ,IAE5JH,EAAO8B,eAAc,WACjB,IAAIjC,EACJM,EAAM4B,SACoB,QAAzBlC,EAAKJ,EAAMuC,gBAA6B,IAAPnC,GAAyBA,EAAG2B,KAAK/B,EAAOU,EAC9E,IACA,IAAI8B,EAAS,WACT9B,EAAM+B,YAAYD,QACtB,EAIA,OAHIE,QACAA,OAAOC,iBAAiB,SAAUH,GAE/B,WACHjC,EAAOqC,UACHF,QACAA,OAAOG,oBAAoB,SAAUL,EAE7C,CA5CU,CA6Cd,GAAG,CAACxC,EAAM8C,aAAc9C,EAAMuC,SAAUvC,EAAMkC,aAAclC,KACpD+C,EAAAA,EAAAA,KAAK,SAAU,CAAEC,IAAK/C,EAAagD,UAAW,kBAC1D,C","sources":["webpack://hjkim1004.github.io/./src/components/section/babylon/index.tsx"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from 'react';\nimport { Color4, Engine, HemisphericLight, Scene, SceneLoader, UniversalCamera, Vector3 } from \"@babylonjs/core\";\nimport \"@babylonjs/loaders\";\nimport \"@babylonjs/loaders/glTF\";\nvar Babylon = function (props) {\n    var reactCanvas = useRef(null);\n    useEffect(function () {\n        var _a;\n        var canvas = reactCanvas.current;\n        if (!canvas)\n            return;\n        var engine = new Engine(canvas, true, props.engineOptions, true);\n        var createScene = function () {\n            // 워커 사용을 위한 WorkerLoader 생성\n            var scene = new Scene(engine);\n            scene.clearColor = new Color4(0, 0, 0, 0);\n            var target = new Vector3(0, 0, 0);\n            var camera = new UniversalCamera(\"Camera\", target, scene);\n            camera.attachControl(canvas, true);\n            // Add a basic light\n            new HemisphericLight(\"light1\", new Vector3(0, 0, 0), scene);\n            // Import glTF\n            SceneLoader.ImportMeshAsync(null, props.rootUrl, props.sceneFileName, scene).then(function (result) {\n                var _a;\n                var newMeshes = result.meshes;\n                newMeshes[0].position.y = 0;\n                newMeshes[0].scaling = new Vector3(80, 80, 80);\n                (_a = props.onMeshLoaded) === null || _a === void 0 ? void 0 : _a.call(props);\n            });\n            return scene;\n        };\n        var scene = createScene();\n        if (scene.isReady()) {\n            (_a = props.onSceneReady) === null || _a === void 0 ? void 0 : _a.call(props, scene);\n        }\n        else {\n            scene.onReadyObservable.addOnce(function (scene) { var _a; return (_a = props.onSceneReady) === null || _a === void 0 ? void 0 : _a.call(props, scene); });\n        }\n        engine.runRenderLoop(function () {\n            var _a;\n            scene.render();\n            (_a = props.onRender) === null || _a === void 0 ? void 0 : _a.call(props, scene);\n        });\n        var resize = function () {\n            scene.getEngine().resize();\n        };\n        if (window) {\n            window.addEventListener(\"resize\", resize);\n        }\n        return function () {\n            engine.dispose();\n            if (window) {\n                window.removeEventListener(\"resize\", resize);\n            }\n        };\n    }, [props.sceneOptions, props.onRender, props.onSceneReady, props]);\n    return (_jsx(\"canvas\", { ref: reactCanvas, className: \"babylon-canvas\" }));\n};\nexport default Babylon;\n"],"names":["props","reactCanvas","useRef","useEffect","_a","canvas","current","engine","Engine","engineOptions","scene","Scene","clearColor","Color4","target","Vector3","UniversalCamera","attachControl","HemisphericLight","SceneLoader","ImportMeshAsync","rootUrl","sceneFileName","then","result","newMeshes","meshes","position","y","scaling","onMeshLoaded","call","createScene","isReady","onSceneReady","onReadyObservable","addOnce","runRenderLoop","render","onRender","resize","getEngine","window","addEventListener","dispose","removeEventListener","sceneOptions","_jsx","ref","className"],"sourceRoot":""}
{"version":3,"file":"384.bundle.js","mappings":"6MA4DA,QAvDc,SAAUA,GACpB,IAAIC,GAAcC,EAAAA,EAAAA,QAAO,MAoDzB,OAnDAC,EAAAA,EAAAA,YAAU,WACN,IAAIC,EACAC,EAASJ,EAAYK,QACzB,GAAKD,EAAL,CAEA,IAAIE,EAAS,IAAIC,EAAAA,IAAOH,GAAQ,EAAML,EAAMS,eAAe,GAqBvDC,EApBc,SAAUL,GAExB,IAAIK,EAAQ,IAAIC,EAAAA,IAAMJ,GACtBG,EAAME,WAAa,IAAIC,EAAAA,IAAO,EAAG,EAAG,EAAG,GACvC,IAAIC,EAAS,IAAIC,EAAAA,IAAQ,EAAG,EAAG,GAc/B,OAba,IAAIC,EAAAA,IAAgB,SAAUF,EAAQJ,GAC5CO,cAAcZ,GAAQ,GAE7B,IAAIa,EAAAA,IAAiB,SAAU,IAAIH,EAAAA,IAAQ,EAAG,EAAG,GAAIL,GAErDS,EAAAA,IAAYC,gBAAgB,KAAMpB,EAAMqB,QAASrB,EAAMsB,cAAeZ,GAAOa,MAAK,SAAUC,GACxF,IAAIpB,EACAqB,EAAYD,EAAOE,OACvBD,EAAU,GAAGE,SAASC,EAAI,EAC1BH,EAAU,GAAGI,QAAU,IAAId,EAAAA,IAAQ,GAAI,GAAI,IAC3CV,EAAOyB,UAAY,gCACW,QAA7B1B,EAAKJ,EAAM+B,oBAAiC,IAAP3B,GAAyBA,EAAG4B,KAAKhC,EAC3E,IACOU,CACX,CACYuB,CAAY5B,GACpBK,EAAMwB,UACwB,QAA7B9B,EAAKJ,EAAMmC,oBAAiC,IAAP/B,GAAyBA,EAAG4B,KAAKhC,EAAOU,GAG9EA,EAAM0B,kBAAkBC,SAAQ,SAAU3B,GAAS,IAAIN,EAAI,OAAqC,QAA7BA,EAAKJ,EAAMmC,oBAAiC,IAAP/B,OAAgB,EAASA,EAAG4B,KAAKhC,EAAOU,EAAQ,IAE5JH,EAAO+B,eAAc,WACjB,IAAIlC,EACJM,EAAM6B,SACoB,QAAzBnC,EAAKJ,EAAMwC,gBAA6B,IAAPpC,GAAyBA,EAAG4B,KAAKhC,EAAOU,EAC9E,IACA,IAAI+B,EAAS,WACT/B,EAAMgC,YAAYD,QACtB,EAIA,OAHIE,QACAA,OAAOC,iBAAiB,SAAUH,GAE/B,WACHlC,EAAOsC,UACHF,QACAA,OAAOG,oBAAoB,SAAUL,EAE7C,CA7CU,CA8Cd,GAAG,CAACzC,EAAM+C,aAAc/C,EAAMwC,SAAUxC,EAAMmC,aAAcnC,KACpDgD,EAAAA,EAAAA,KAAK,SAAU,CAAEC,IAAKhD,EAAa6B,UAAW,kBAC1D,C","sources":["webpack://hjkim1004.github.io/./src/components/section/babylon/index.tsx"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from 'react';\nimport { Color4, Engine, HemisphericLight, Scene, SceneLoader, UniversalCamera, Vector3 } from \"@babylonjs/core\";\nimport \"@babylonjs/loaders\";\nimport \"@babylonjs/loaders/glTF\";\nvar Babylon = function (props) {\n    var reactCanvas = useRef(null);\n    useEffect(function () {\n        var _a;\n        var canvas = reactCanvas.current;\n        if (!canvas)\n            return;\n        var engine = new Engine(canvas, true, props.engineOptions, true);\n        var createScene = function (canvas) {\n            // 워커 사용을 위한 WorkerLoader 생성\n            var scene = new Scene(engine);\n            scene.clearColor = new Color4(0, 0, 0, 0);\n            var target = new Vector3(0, 0, 0);\n            var camera = new UniversalCamera(\"Camera\", target, scene);\n            camera.attachControl(canvas, true);\n            // Add a basic light\n            new HemisphericLight(\"light1\", new Vector3(0, 0, 0), scene);\n            // Import glTF\n            SceneLoader.ImportMeshAsync(null, props.rootUrl, props.sceneFileName, scene).then(function (result) {\n                var _a;\n                var newMeshes = result.meshes;\n                newMeshes[0].position.y = 0;\n                newMeshes[0].scaling = new Vector3(80, 80, 80);\n                canvas.className = 'babylon-canvas babylon-loaded';\n                (_a = props.onMeshLoaded) === null || _a === void 0 ? void 0 : _a.call(props);\n            });\n            return scene;\n        };\n        var scene = createScene(canvas);\n        if (scene.isReady()) {\n            (_a = props.onSceneReady) === null || _a === void 0 ? void 0 : _a.call(props, scene);\n        }\n        else {\n            scene.onReadyObservable.addOnce(function (scene) { var _a; return (_a = props.onSceneReady) === null || _a === void 0 ? void 0 : _a.call(props, scene); });\n        }\n        engine.runRenderLoop(function () {\n            var _a;\n            scene.render();\n            (_a = props.onRender) === null || _a === void 0 ? void 0 : _a.call(props, scene);\n        });\n        var resize = function () {\n            scene.getEngine().resize();\n        };\n        if (window) {\n            window.addEventListener(\"resize\", resize);\n        }\n        return function () {\n            engine.dispose();\n            if (window) {\n                window.removeEventListener(\"resize\", resize);\n            }\n        };\n    }, [props.sceneOptions, props.onRender, props.onSceneReady, props]);\n    return (_jsx(\"canvas\", { ref: reactCanvas, className: \"babylon-canvas\" }));\n};\nexport default Babylon;\n"],"names":["props","reactCanvas","useRef","useEffect","_a","canvas","current","engine","Engine","engineOptions","scene","Scene","clearColor","Color4","target","Vector3","UniversalCamera","attachControl","HemisphericLight","SceneLoader","ImportMeshAsync","rootUrl","sceneFileName","then","result","newMeshes","meshes","position","y","scaling","className","onMeshLoaded","call","createScene","isReady","onSceneReady","onReadyObservable","addOnce","runRenderLoop","render","onRender","resize","getEngine","window","addEventListener","dispose","removeEventListener","sceneOptions","_jsx","ref"],"sourceRoot":""}